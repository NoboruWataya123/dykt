// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id             String         @id @default(cuid())
    name           String?
    email          String?        @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    comments       Comment[]
    follow         Follow[]
    Like           Like[]
    Bookmark       Bookmark[]
    Notification   Notification[]
    Message        Message[]
    Conversation   Conversation?  @relation(fields: [conversationId], references: [id])
    conversationId String?
    Report         Report[]
}

model Post {
    id         String     @id @default(cuid())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    published  Boolean    @default(false)
    title      String
    content    String?
    author     User       @relation(fields: [authorId], references: [id])
    authorId   String
    tags       Tag[]
    category   Category   @relation(fields: [categoryId], references: [id])
    categoryId String
    comments   Comment[]
    Like       Like[]
    Bookmark   Bookmark[]
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    posts Post[]
}

model Category {
    id    String @id @default(cuid())
    name  String @unique
    posts Post[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
    content   String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String

    parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
    parentId String?
    children Comment[] @relation("CommentToComment")

    @@unique([postId, parentId, id])
}

model Like {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Follow {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
}

model Bookmark {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Notification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
    type      String
    content   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model Message {
    id             String        @id @default(cuid())
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    published      Boolean       @default(false)
    content        String
    user           User          @relation(fields: [userId], references: [id])
    userId         String
    Conversation   Conversation? @relation(fields: [conversationId], references: [id])
    conversationId String?
}

model Conversation {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    published Boolean   @default(false)
    messages  Message[]
    users     User[]
}

model ReportType {
    id      String   @id @default(cuid())
    name    String   @unique
    reports Report[]
}

model Report {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    published Boolean    @default(false)
    content   String
    user      User       @relation(fields: [userId], references: [id])
    userId    String
    type      ReportType @relation(fields: [typeId], references: [id])
    typeId    String
}
